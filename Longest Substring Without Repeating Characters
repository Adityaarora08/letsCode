class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> vect(256,-1);
        int left=0,right=0;
        int len=0;
        int n=s.length();
        while(right<n){
            if(vect[s[right]]!=-1){
                left=max(vect[s[right]]+1,left);
            }
            vect[s[right]]=right;
            len=max(len,right-left+1);
            right++;
        }
        return len;
        // unordered_map<char,int> umap;
        // int maxLen=0;
        // int globalLen=0;
        // int l=0,r=0;
        // if(s==" "){
        //     return 1;
        // }
//         while(r<s.length()){
            
//         }
//         for(int i=0;i<s.length();i++){
//             if(umap[s[i]]>0){
//                 globalLen=max(maxLen,globalLen);
//                 maxLen=0;
//                 i=umap[s[i]]-1;
//                 umap[s[i]]=0;
//             }else{
//                 umap[s[i]]=i+1;
//                 maxLen++;  
//             }
             
//             globalLen=max(maxLen,globalLen);
//         }
        // return globalLen;
	// int start=-1;
	// int maxi=0;
	// vector<int> dict(256,-1);
	// for(int i=0;i<s.length();i++){
	// if(dict[s[i]]>start)
	// start=dict[s[i]];
	// dict[s[i]]=i;
	// maxi=max(maxi,i-start);
	// }
	// return maxi;
    }
};
