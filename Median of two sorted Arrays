
Optimal Solution
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size(),n2=nums2.size();
        if(n2<n1){
            return findMedianSortedArrays(nums2,nums1);
        }
        int l=0,h=n1;
        while(l<=h){
            int cut1=(l+h)>>1;
            int cut2=(n1+n2+1)/2-cut1;
            int left1 = cut1==0?INT_MIN : nums1[cut1-1],right1=cut1==n1?INT_MAX : nums1[cut1];
            int left2 = cut2==0?INT_MIN : nums2[cut2-1],right2=cut2==n2?INT_MAX : nums2[cut2];
            if(left1<=right2 && left2<=right1){
                if((n1+n2)%2 == 0){
                    return (max(left1,left2) + min(right1,right2))/2.0;
                }else{
                    return max(left1,left2);
                }
            }else if(left1>right2){
                h=cut1-1;
            }else{
                l=cut1+1;
            }
           
        }
       return 0.0; 
    }
};




Space and time very bad
class Solution {
public:
    double findMedianSortedArrays(vector<int>& arr1, vector<int>& arr2) {
        int n1=arr1.size();
        int n2=arr2.size();
        int n=n1+n2-1;
        int arr3[n+1];
	    int k=0;
	int j=0;
	int i=0;	
	while(i<n1&&j<n2)
	{    	
			if(arr1[i]>arr2[j])
				arr3[k++]=arr2[j++];
			else
				arr3[k++]=arr1[i++];
	}
	while(i<n1)
	{
		arr3[k++]=arr1[i++];
	}
	while(j<n2)
	{
		arr3[k++]=arr2[j++];
	}
        int a=n+1;
        double median;
        if((n-1)%2)
        {
            median=arr3[((a+1)/2)-1];
        }
        else if(n%2)
        {
            median=((arr3[a/2]+arr3[(a/2)-1])/(double)2);
        }
        return median;
}
     
};
