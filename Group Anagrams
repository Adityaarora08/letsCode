class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> ans;
        unordered_map<string, vector<string> > mp;
        for(int i=0;i<strs.size();i++){
            string str=strs[i];
            sort(str.begin(),str.end());
            mp[str].push_back(strs[i]);
        }
        for(auto it: mp){
            ans.push_back(it.second);
        }
        return ans;
        
        //wrong output solution
        // vector<pair<int,int>> asciipairs;
        // if(strs.size()<=1){
        //     ans.push_back(strs);
        //     return ans;
        // }
        // if(strs.size()==2){
        //     int sum1=0;
        //     for(int i=0; i<strs[0].length(); i++)
        //     {
        //     int asciiValue = strs[0][i];
        //     sum1 = sum1+ asciiValue;
        //     }
        //     int sum2=0;
        //     for(int i=0; i<strs[1].length(); i++)
        //     {
        //     int asciiValue = strs[1][i];
        //     sum2 = sum2+ asciiValue;
        //     }
        //     if(sum1==sum2){
        //         ans.push_back(strs);
        //         return ans;
        //     }else{
        //         ans.push_back({strs[0]});
        //         ans.push_back({strs[1]});
        //         return ans;
        //     }
        // }
        // for(int j=0;j<strs.size();j++){
        //     int sum=0;
        //     if(strs[j].length()==0){
        //         sum=0;
        //     }
        //     else{
        //     for(int i=0; i<strs[j].length(); i++)
        //     {
        //     int asciiValue = strs[j][i];
        //     sum = sum+ asciiValue;
        //     }}
        //     asciipairs.push_back(make_pair(sum,j));
        // }
        // sort(asciipairs.begin(),asciipairs.end());
        // int currSum=0;
        // for(int i=0;i<asciipairs.size();i++){
        //     vector<string> subAns;
        //     currSum=asciipairs[i].first;
        //     while(asciipairs[i].first==currSum){
        //         subAns.push_back(strs[asciipairs[i].second]);
        //         i++;
        //     }
        //     ans.push_back(subAns);
        //     i--;
        // }
    return ans;
    }
};
