//recursive (not optimal)
class Solution {
public:
void permutations(vector<vector<int>> &ans,vector<int> &ds,vector<int>& nums,vector<int> &vis){
        if(ds.size()==nums.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(vis[i]==1)continue;
            ds.push_back(nums[i]);
            vis[i]=1;
            permutations(ans,ds,nums,vis);
            ds.pop_back();
            vis[i]=0;
        }
    }
    string getPermutation(int n, int k) {
        // string ans="";
        // int fact=1;
        vector<int> nums;
        for(int i=0;i<n;i++){
            // fact=fact*(i+1);
            nums.push_back(i+1);
        }
       
        string s="";
        vector<vector<int>> ans;
       vector<int> ds;
       vector<int> vis(nums.size(),0);
       permutations(ans,ds,nums,vis);
        for(int i=0;i<nums.size();i++){
            s+=to_string(ans[k-1][i]);
        }
        return s;
    }
};
//non recursive (OPTIMAL CHUMMA SOLUTION
class Solution {
public:
    string getPermutation(int n, int k) {
        string ans="";
        int fact=1;
        vector<int> nums;
        for(int i=0;i<n;i++){
            fact=fact*(i+1);
            nums.push_back(i+1);
        }
        k--;
        while(1){
            fact=fact/n;
            ans+=to_string(nums[k/fact]);
            nums.erase(nums.begin()+k/fact);
            n=nums.size();
            k=k%fact;
            if(n==0){
                break;
            }
        }
        return ans;
    }
};
