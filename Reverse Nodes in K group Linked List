/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // ListNode* reverseList(ListNode* head,int k){
    //     ListNode* newHead=NULL;
    //     while(newHead!=NULL && k--){
    //         ListNode* temp=head->next;
    //         head->next=newHead;
    //         newHead=head;
    //         head=temp;
    //     }
    //     return newHead;
    // }
    ListNode* reverseKGroup(ListNode* head, int k) {

        if(k==0 || head==NULL)return head;
        ListNode* temp=new ListNode(0);
        temp->next=head;
        ListNode *prev=temp,*nex=temp,*cur=temp;
        int count=0;
        while(cur->next!=NULL){
            count++;
            cur=cur->next;
        }
        // temp=head;
        //  count=count/k;
         
        while(count>=k){
            int a=k-1;
            cur=prev->next;
            nex=cur->next;
            while(a-- && nex!=NULL ){
                cur->next=nex->next;
                nex->next=prev->next;
                prev->next=nex;
                nex=cur->next;
            }
            prev=cur;
            count-=k;
            // if(count==q-1){
            //     temp=prev->next;
            // }
            // prev=head;
            // prev->next=nex;
            // head=nex;
            // nex=nex->next;
            // newNode=head;
            // head->next=reverseList(head->next,a);
            // while(a-- && head!=NULL){
            //     head=head->next;
            // }
        }
        return temp->next;
    }
};
