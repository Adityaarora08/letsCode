//can be solved using priority queue
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        map<int,int> mp;
        // sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            // int presentSize=mp.size();
            // if(presentSize==k && mp[nums[i]]==0){
            //     break;
            // }
            mp[nums[i]]++;
        }
        map<int, int>::iterator itr;
        vector< pair<int,int> > ans;
        for(itr=mp.begin();itr!=mp.end();itr++){
            if(itr->second!=0){
                ans.push_back(make_pair(itr->second,itr->first));
            }
        }
        sort(ans.begin(),ans.end(),greater< pair<int,int> >());
        vector< pair<int,int> >::iterator itrv;
        vector<int> answ;
        for(itrv=ans.begin();itrv!=ans.end();itrv++){
            if(k==0){
                break;
            }
            answ.push_back(itrv->second);
            k--;
        }
        return answ;
    }
};
