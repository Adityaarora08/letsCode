//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    void sieve() {
        // vector<bool> isPrime,int N
        // isPrime[0]=false;
        // isPrime[1]=false;
        // for(int i=2;i*i<=N;i++){
        //     if(isPrime[i]){
        //         for(int j=2*i;j<=N;j+=i){
        //             isPrime[j]=false;
        //         }
        //     }
        // }
    }

    vector<int> findPrimeFactors(int N) {
        vector<bool> isPrime(N+1,true);
        // sieve(isPrime,N);
        isPrime[0]=false;
        isPrime[1]=false;
        for(int i=2;i*i<=N;i++){
            if(isPrime[i]){
                for(int j=2*i;j<=N;j+=i){
                    isPrime[j]=false;
                }
            }
        }
        unordered_set<int> st;
        vector<int> ans;
        for(int i=0;i<=N && N>0;i++){
            if(isPrime[i]){
                while(N%i==0){
                ans.push_back(i);
                N/=i;
                }
            }
        }
        // vector<int> ans;
        // for(auto i:st){
        //     ans.push_back(i);
        // }
        sort(ans.begin(),ans.end());
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t = 1;
    cin >> t;

    // freopen ("output_gfg.txt", "w", stdout);

    while (t--) {
        // Input
        int n;
        cin >> n;

        Solution obj;
        obj.sieve();
        vector<int> vec = obj.findPrimeFactors(n);
        for (int i = 0; i < vec.size(); i++) {
            cout << vec[i] << " ";
        }
        cout << endl;

        // cout << "~\n";
    }
    // fclose(stdout);

    return 0;
}
// } Driver Code Ends
