#include <iostream>
#include <queue>
using namespace std;
void printDFS(int** edges,int n,int sv,bool* visited)
{
	cout<<sv<<endl;
	visited[sv]=true;
	for(int i=0;i<n;i++)
	{
		if(sv==i)
		continue;
		if(edges[sv][i]==1)
		{
			if(visited[i])
			continue; 
			printDFS(edges,n,i,visited);
		}
	}
}
void printBFS(int** edges,int n,int sv,bool* visited)
{
	queue<int> pendingvertices;
	pendingvertices.push(sv);
	visited[sv]=1;
	while(!pendingvertices.empty())
	{
		int currentvertex = pendingvertices.front();
		cout<<currentvertex<<endl;
		pendingvertices.pop();
		for(int i=0;i<n;i++)
		{
			if(i==currentvertex)
			continue;
			if(edges[currentvertex][i]==1 && visited[i]==0)
			{
				pendingvertices.push(i);
				visited[i]=1;
			}
		}
		
	}
}

void DFS(int** edges,int n)
{
	bool* visited = new bool[n];
	for(int i=0;i<n;i++)
	{
		visited[i]=0;
	}
	for(int i=0;i<n;i++)
	{
		if(!visited[i])
		printDFS(edges,n,i,visited);
	}
	
	delete [] visited;
}

void BFS(int** edges,int n)
{
	bool* visited = new bool[n];
	for(int i=0;i<n;i++)
	{
		visited[i]=0;
	}
	for(int i=0;i<n;i++)
	{
		if(!visited[i])
		printBFS(edges,n,i,visited);
	}
	
	delete [] visited;
}
int main()
{
	int n;
	int e;
	cin>>e>>n;
	int** edges = new int*[n];
	for(int i=0;i<n;i++)
	{
		edges[i]=new int[n];
		for(int j=0;j<n;j++)
		{
			edges[i][j]=0;
		}
	}
	for(int i=0;i<e;i++)
	{
		int f,s;
		cin>>f>>s;
		edges[f][s]=1;
		edges[s][f]=1;
	}
//	bool* visited = new bool[n];
//	for(int i=0;i<n;i++)
//	{
//		visited[i]=0;
//	}
	cout<<"DFS"<<endl;
	DFS(edges,n);
//	printDFS(edges,n,0,visited);
//	for(int i=0;i<n;i++)
//	{
//		visited[i]=0;
//	}
	cout<<"BFS"<<endl;
	BFS(edges,n);
//	printBFS(edges,n,0,visited);
}
