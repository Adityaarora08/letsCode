/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root){
    
    if(root==NULL){
        return NULL;
    }
    
    int left=height(root->left);
    int right=height(root->right);
    
    return max(left,right)+1;
}

int maxDepth(TreeNode* root) {
    
    return height(root);
}
//     int maxDepth(TreeNode* root) {
//         if(!root)
//             return 0;
//         queue<TreeNode*> q;
//         q.push(nullptr);
//          int a=1;
//         while(!q.empty())
//         {
           
//             TreeNode* node=q.front();
//             q.pop();
//             if (!node) {
//                 if (q.empty()){
//                     break;
//                 }
//                 a++;
//                 q.push(nullptr);
//                 continue;
//             }
//             if(node->left )
//             {
//                 q.push(node->left);
//                 //a++;
//             }
//             if(node->right)
//             {
//                 q.push(node->right);
//                 //a++;
//             }
            // else if(node->right&&node->left)
            // {
            //     q.push(node->right);
            //     q.push(node->left);
            //     a++;
            // } 
        //}
    // return a;}
};
