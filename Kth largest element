#include <bits/stdc++.h>
using namespace std;
 

struct item {

    int value;

    int priority;
};
 
// Store the element of a priority queue
item pr[100000];
 
// Pointer to the last index

int size = -1;
 

void enqueue(int value, int priority)
{

    // Increase the size

    size++;
 

    // Insert the element

    pr[size].value = value;

    pr[size].priority = priority;
}
 

int peek()
{

    int highestPriority = INT_MIN;

    int ind = -1;
 

    // Check for the element with

    // highest priority

    for (int i = 0; i <= size; i++) {
 

        // If priority is same choose

        // the element with the

        // highest value

        if (highestPriority == pr[i].priority && ind > -1

            && pr[ind].value < pr[i].value) {

            highestPriority = pr[i].priority;

            ind = i;

        }

        else if (highestPriority < pr[i].priority) {

            highestPriority = pr[i].priority;

            ind = i;

        }

    }
 void dequeue()
{

    // Find the position of the element

    // with highest priority

    int ind = peek();
 

    // Shift the element one index before

    // from the position of the element

    // with highest priority is found

    for (int i = ind; i < size; i++) {

        pr[i] = pr[i + 1];

    }
 

    // Decrease the size of the

    // priority queue by one

    size--;
}
int main()
{
    int n;
    cin >> n;
    int k;
    cin >> k;
    vector<int> arr(n);
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    priority_queue<int> pq;
    for (int i = 0; i < n; i++)
        pq.push(arr[i]);

    int l = k - 1;
    while (l > 0)
    {
        pq.pop();
        l--;
    }

    cout << pq.top();
}
