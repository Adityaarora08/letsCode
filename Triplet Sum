#include<bits/stdc++.h>
int tripletSum(int *arr, int n, int num)
{
    int numTriplet=0;
    sort(arr,arr+n);
    // unordered_map<int,int> m;
    // for(int i=0;i<n;i++)
    // {
    //     m[arr[i]]+=1;
    // }
    for(int i=0;i<n;i++)
    {
        int j=i+1,k=n-1;
        //int a=n;
        int sum=num-arr[i];
        int count=0;
        while(j<k)
        {
            // if(arr[j]+arr[k]==sum && m[arr[i]] && m[arr[j]] && m[arr[k]])
            // {
            //     count++; 
            //     m[arr[i]]--;
            //     m[arr[j]]--;
            //     m[arr[k]]--;
            //     break;
            // }
            if(arr[j]+arr[k]>sum )
                k--;
            else if(arr[j]+arr[k]<sum )
                j++;
            else
            {
                int elementAtStart = arr[j];
                int elementAtEnd = arr[k]; 
                //condition when starting element and ending element is equal to each other
                if (elementAtStart == elementAtEnd) 
                { 
                    int totalElementsFromStartToEnd = (k - j) + 1; 
                    count += (totalElementsFromStartToEnd * (totalElementsFromStartToEnd - 1) / 2); 
                    break;

                }
                // condition to check when there are multiple starting element equal to each other and multiple ending element 
                //which are equal to each other and the pair sum of each starting element and ending element is equal to our target sum
                int tempStartIndex = j + 1; 
                int tempEndIndex = k - 1; 
                while (tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart) 
                { 
                    tempStartIndex += 1; 

                } 
                while (tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd) 
                { 
                    tempEndIndex -= 1; 
                } 
                int totalElementsFromStart = (tempStartIndex - j); 
                int totalElementsFromEnd = (k - tempEndIndex); 
                count += (totalElementsFromStart * totalElementsFromEnd); 
                j = tempStartIndex; k = tempEndIndex; 
            }
    }
    numTriplet+=count;
}
    return numTriplet;
    
}
